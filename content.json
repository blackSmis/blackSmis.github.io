{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Git配置","slug":"git操作","date":"2020-06-12T07:04:18.116Z","updated":"2020-06-12T07:10:32.988Z","comments":true,"path":"2020/06/12/git操作/","link":"","permalink":"http://yoursite.com/2020/06/12/git%E6%93%8D%E4%BD%9C/","excerpt":"","text":"git配置流程在GitHub上创建仓库下载安装git，运行bash配置自己的信息 git config –global user.name “black smith” git config –global user.email “xxx@xxx.com“ 进入到需要上传的目录下 输入git init（初始化，生成.git文件） git add . （将项目上所有的文件添加到仓库中） git commit -m “提交信息”（此次提交的注释） git remote add origin https://自己的仓库地址(关联之后可以用git remote -v 来检查是否关联成功) 一般情况需要先pull一下：git pull origin master git push -u origin master （将项目添加到仓库中）","categories":[],"tags":[]},{"title":"webpack学习","slug":"webpack","date":"2020-06-12T07:04:18.085Z","updated":"2020-06-12T07:12:43.344Z","comments":true,"path":"2020/06/12/webpack/","link":"","permalink":"http://yoursite.com/2020/06/12/webpack/","excerpt":"","text":"npm 安装命令1234npm install moduleName # 安装模块到项目目录下 npm install -g moduleName # -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。npm install --save moduleName # -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。 等于-Snpm install --save-dev moduleName #-save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。等于-D 进入项目目录 初始化 npmnpm init -y //-y 为yes的意思 生成默认的package.json 安装webpack webpack-clinpm install webpack webpack-cli –save-dev //自动生成node_modules文件 新建src文件夹，在文件夹下新建index.js为入口文件 在package.json同级目录下新建配置文件 webpack.config.js 在webpack.config.js中进行配置入口，出口，模式 12345678910&#x2F;&#x2F;node写法var path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123; mode: &#39;development&#39;, &#x2F;&#x2F;模式 development production entry: &#39;.&#x2F;src&#x2F;index.js&#39;, &#x2F;&#x2F;入口文件 output: &#123; filename: &#39;bundle.js&#39;, &#x2F;&#x2F;打包后的文件名 path: path.resolve(__dirname, &#39;dist&#39;) &#x2F;&#x2F;打包位置 &#125;&#125; 打包代码 1npx webpack 修改配置文件夹和运行命令 1234567&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;build&quot;:&quot;webpack --config webpack.config.js&quot; &#x2F;&#x2F;webpack.config.js为配置文件名 &#125;,&#x2F;&#x2F;打包代码npm run build 安装webpack-dev-server 可设置服务器 12npx webpack-dev-server &#x2F;&#x2F;npx安装可避免全局安装npm install webpack-dev-server -D &#x2F;&#x2F;webpack-dev-server运行 需要本地和全局都安装 webpack.config.js中配置 12345678910111213141516&#x2F;&#x2F;node写法var path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123; devServer:&#123; &#x2F;&#x2F;开发服务器的配置 port:3000, &#x2F;&#x2F;端口 progress:true, &#x2F;&#x2F;进度条 contentBase:&#39;.&#x2F;dist&#39;, &#x2F;&#x2F;位置 compress:true, &#x2F;&#x2F;压缩 &#125;, mode: &#39;development&#39;, &#x2F;&#x2F;模式 development production entry: &#39;.&#x2F;src&#x2F;index.js&#39;, &#x2F;&#x2F;入口文件 output: &#123; filename: &#39;bundle.js&#39;, &#x2F;&#x2F;打包后的文件名 path: path.resolve(__dirname, &#39;dist&#39;) &#x2F;&#x2F;打包位置 &#125;&#125; 配置运行 12&quot;build&quot;: &quot;webpack --config webpack.config.js&quot;,&quot;dev&quot;: &quot;webpack-dev-server&quot; 安装html-webpack-plugin插件 12345678910111213141516171819202122232425262728npx html-webpack-plugin &#x2F;&#x2F;同时也需要全局安装npm i html-webpack-plugin --save-dev在webpack.config.js中引入&#x2F;&#x2F;node写法let path &#x3D; require(&#39;path&#39;);let HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;); module.exports &#x3D; &#123; devServer: &#123; &#x2F;&#x2F;开发服务器的配置 port: 3000, &#x2F;&#x2F;端口 progress: true, &#x2F;&#x2F;进度条 contentBase: &#39;.&#x2F;dist&#39;, &#x2F;&#x2F;位置 open: true, &#x2F;&#x2F;自动打开 compress: true, &#x2F;&#x2F;压缩 &#125;, mode: &#39;development&#39;, &#x2F;&#x2F;模式 development production entry: &#39;.&#x2F;src&#x2F;index.js&#39;, &#x2F;&#x2F;入口文件 output: &#123; filename: &#39;bundle.js&#39;, &#x2F;&#x2F;打包后的文件名 path: path.resolve(__dirname, &#39;dist&#39;) &#x2F;&#x2F;打包位置 &#125;, plugins:[ &#x2F;&#x2F;数组 放着所有webpack插件 new HtmlWebpackPlugin(&#123; template:&#39;.&#x2F;src&#x2F;index.html&#39;, filename:&#39;index.html&#39; &#125;) ]&#125; 引入模块一、引入样式模块1、引入css模块新建index.css文件，并在入口文件index.js文件中引入 1require(&#39;.&#x2F;index.css&#39;) 在配置文件webpack.config.js中添加模块 12345module:&#123; &#x2F;&#x2F;模块 rules:[ &#x2F;&#x2F;规则 &#123;test:&#x2F;\\.css$&#x2F;,use:[&#39;style-loader&#39;,&#39;css-loader&#39;]&#125; ]&#125; 安装style-loader和css-loader组件 1npm i style-loader css-loader --save-dev 2、引入less文件12345678910111213141516171819202122232425262728293031323334353637新建index.less文件，并在入口文件index.js文件中引入require(&#39;.&#x2F;index.less&#39;)在配置文件webpack.config.js中添加模块 module:&#123; &#x2F;&#x2F;模块 rules:[ &#x2F;&#x2F;规则 &#123;test:&#x2F;\\.css$&#x2F;,use:[&#39;style-loader&#39;,&#39;css-loader&#39;]&#125;, &#123;test:&#x2F;\\.less$&#x2F;,use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]&#125;, ]&#125;安装less 和 less-loader组件npm i less less-loader -D抽离css样式安装mini-css-extract-plugin插件npm i mini-css-extract-plugin -D配置let MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;); plugins: [ &#x2F;&#x2F;数组 放着所有webpack插件 new MiniCssExtractPlugin(&#123; filename: &#39;main.css&#39; &#125;) ], module: &#123; &#x2F;&#x2F;模块 rules: [ &#x2F;&#x2F;规则 &#123; test: &#x2F;\\.css$&#x2F;, use: [MiniCssExtractPlugin.loader, &#39;css-loader&#39;] &#125;, &#123; test: &#x2F;\\.less$&#x2F;, use: [MiniCssExtractPlugin.loader,&#39;css-loader&#39;, &#39;less-loader&#39;] &#125; ] &#125;&#125; 二、安装es6-&gt;es5 转换123npm i @babel&#x2F;core babel-loader@babel&#x2F;preset-env -Dnpm install -D @babel&#x2F;plugin-transform-runtimenpm install -S @babel&#x2F;runtime 配置 12345678910111213141516171819202122module: &#123; &#x2F;&#x2F;模块 rules: [ &#x2F;&#x2F;规则 &#123; test: &#x2F;\\.js$&#x2F;, use: &#123; loader: &#39;babel-loader&#39;, options: &#123; presets: [ &#39;@babel&#x2F;preset-env&#39; ], plugins:[ &#39;@babel&#x2F;plugin-proposal-class-properties&#39;, &#39;@babel&#x2F;plugin-transform-runtime&#39; ] &#125; &#125;, exclude:&#x2F;node_modules&#x2F; &#125;, &#123; test: &#x2F;\\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;, &#123; test: &#x2F;\\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;, ]&#125; 三、安装eslint 用于可组装的JavaScript和JSX检查工具1npm i eslint eslint-loader 配置，可到eslint官网下载配置文件 .eslintrc.json 123456789&#123; test: &#x2F;\\.js$&#x2F;, use: &#123; loader: &#39;eslint-loader&#39;, options:&#123; enforce: &#39;pre&#39; &#125; &#125;&#125;, 四、打包图片12345678910111213npm i file-loader url-loader -D &#x2F;&#x2F;js中与css中插入npm i html-withimg-loader html-loader -D &#x2F;&#x2F;html中插入图片标签&#123; test: &#x2F;\\.(jpg|png|gif|bmp|jpeg)$&#x2F;, use: &#123; &#x2F;&#x2F;配置处理 图片路径 loader: &#39;url-loader&#39;, options: &#123; esModule:false, limit: 1 &#125; &#125;&#125;,","categories":[],"tags":[]},{"title":"vue学习","slug":"vue","date":"2020-06-12T07:04:17.975Z","updated":"2020-06-12T07:11:49.308Z","comments":true,"path":"2020/06/12/vue/","link":"","permalink":"http://yoursite.com/2020/06/12/vue/","excerpt":"","text":"下载并引入vue.js文件1&lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt; 新建vm对象12345678&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;&lt;script&gt; var vm &#x3D; new Vue(&#123; el:&quot;#app&quot;, data:&#123;&#125;, methods:&#123;&#125; &#125;) &lt;&#x2F;script&gt; 自定义全局过滤器12&lt;td&gt;&#123;&#123;item.time | dateFormat()&#125;&#125;&lt;&#x2F;td&gt;Vue.filter(&quot;dateFormat&quot;,function(dateStr,pattern&#x3D;&quot;&quot;)&#123;&#125; 自定义私人过滤器12345678910var vm2 &#x3D; new Vue(&#123; el: &quot;#app2&quot;, data: &#123;&#125;, methods: &#123;&#125;, &#x2F;&#x2F; 私人过滤器 filters: &#123; dateFormat: function (dateStr, pattern &#x3D; &quot;&quot;) &#123; &#125; &#125;&#125;) 自定义按键修饰符12@keyup.f2&#x3D;&quot;add&quot;Vue.config.keyCodes.f2 &#x3D; 113; 自定义全局指令12345678910111213&#x2F;&#x2F; 自定义全局指令Vue.directive(&#39;focus&#39;, &#123; bind: function (el) &#123; &#x2F;&#x2F; 指令绑定到元素上时 &#125;, inserted: function (el,binding) &#123; &#x2F;&#x2F; 元素插入到DOM时 el.focus(); console.log(binding); &#125;, update: function (el) &#123; &#x2F;&#x2F;VNode更新时 &#125;, componentUpdated: function () &#123; &#125;, unbind: function () &#123; &#125;&#125;) 自定义私有指令1234567891011121314151617181920212223var vm2 &#x3D; new Vue(&#123; el: &quot;#app2&quot;, data: &#123; time: new Date(), styleobj: &#123; &#39;color&#39;: &#39;red&#39;, &#39;font-style&#39;: &#39;italic&#39;, &#39;font-size&#39;: &quot;20px&quot; &#125;, &#125;, methods: &#123;&#125;, &#x2F;&#x2F; 私人过滤器 filters: &#123; &#125;, &#x2F;&#x2F; 私有指令 directives: &#123; &quot;fontsize&quot;:&#123; bind: function(el,binding)&#123; el.style.fontSize &#x3D; parseInt(binding.value)+&quot;px&quot;; &#125; &#125;, &quot;color&quot;: function (el, binding) &#123; console.log(binding); el.style.color &#x3D; binding.value; &#125; &#125;&#125;) 生命周期函数12345678910111213var vm2 &#x3D; new Vue(&#123; el: &quot;#app2&quot;, data: &#123;&#125;, methods: &#123;&#125;, beforeCreate()&#123;&#125;,&#x2F;&#x2F;data和methods中数据还未初始化 created()&#123;&#125;,&#x2F;&#x2F;data和methods中数据已初始化 beforeMount()&#123;&#125;,&#x2F;&#x2F;模板已在内存中编译好，还未挂载到页面上 mounted()&#123;&#125;,&#x2F;&#x2F;模板已挂载到页面上 beforeUpdate()&#123;&#125;,&#x2F;&#x2F;data数据已更新，页面数据还未更新 updated()&#123;&#125;,&#x2F;&#x2F;data数据和页面数据都已更新 beforeDestory()&#123;&#125;,&#x2F;&#x2F;进入销毁状态，数据还未销毁 destoryed()&#123;&#125;&#x2F;&#x2F;数据已销毁&#125;) 创建组件1234567891011121314151617181920212223242526272829303132333435363738&lt;div id&#x3D;&quot;app&quot;&gt; &lt;mycom1&gt;&lt;&#x2F;mycom1&gt; &lt;mycom2&gt;&lt;&#x2F;mycom2&gt; &lt;mycom3&gt;&lt;&#x2F;mycom3&gt; &lt;mycom4&gt;&lt;&#x2F;mycom4&gt;&lt;&#x2F;div&gt;&lt;template id&#x3D;&quot;temp&quot;&gt; &lt;h3&gt;这是创建的第四个组件&lt;&#x2F;h3&gt;&lt;&#x2F;template&gt;&lt;script&gt; var com1 &#x3D; Vue.extend(&#123; template: &quot;&lt;h3&gt;创建组件的第一个组件&lt;&#x2F;h3&gt;&quot; &#125;) Vue.component(&quot;mycom1&quot;, com1); Vue.component(&quot;mycom2&quot;, Vue.extend(&#123; template:&quot;&lt;h3&gt;创建组件的第二个组件&lt;&#x2F;h3&gt;&quot; &#125;)); Vue.component(&quot;mycom3&quot;, &#123; template:&quot;&lt;h3&gt;创建组件的第三个组件&lt;&#x2F;h3&gt;&quot; &#125;); Vue.component(&quot;mycom4&quot;,&#123; template:&quot;#temp&quot; &#125;) &#x2F;&#x2F;创建Vue实例,得到 ViewModel var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123;&#125;, methods: &#123;&#125; &#125;);&lt;&#x2F;script&gt;","categories":[],"tags":[]},{"title":"linux操作","slug":"linux","date":"2020-06-12T07:04:17.897Z","updated":"2020-06-12T07:11:05.781Z","comments":true,"path":"2020/06/12/linux/","link":"","permalink":"http://yoursite.com/2020/06/12/linux/","excerpt":"","text":"常用命令 编号 命令 说明 1 ls 查看当前目录下的文件 2 cd 切换目录 3 pwd 查看当前目录 4 touch 创建文件 5 mkdir 新建目录 6 rm 删除文件 7 clear 清屏 查询指令12command --helpman command &#x2F;&#x2F;空格 enter b f q ls常用选项以 . 开头的为隐藏文件参数 | 说明—|—-a | 查看所有文件-l | 查看文件详细信息-h | 人性化显示文件大小 1ls -lha &#x2F;&#x2F;参数可连接使用 ls通配符 参数 说明 * 表示任意个数字符 ？ 表示一个字符 [] 表示可匹配字符组中的任意一个字符 [abc] 表示可匹配a、b、c中任意一个字符 [a-z] 表示可匹配a-z中的任意一个字符 1234ls *.txt &#x2F;&#x2F;匹配以.txt结尾的文件 ls ?1.txt &#x2F;&#x2F;匹配以任意一个字符开头，以1.txt结尾的文件ls [123].txt &#x2F;&#x2F;匹配1.txt、2.txt、3.txtls [a-z].txt &#x2F;&#x2F;匹配a.txt、b.txt...z.txt cd命令 — 123cd&#x2F;cd ~ &#x2F;&#x2F;切换到当前用户目录cd .. &#x2F;&#x2F;切换到上级目录cd - &#x2F;&#x2F;最近的两个目录之间切换 mkdir命令 — 12mkdir a &#x2F;&#x2F;创建一个a的文件夹mkdir -p a&#x2F;a&#x2F;a&#x2F; &#x2F;&#x2F;递归创建文件夹 rm命令 — 123mkdir -f abc &#x2F;&#x2F;无提示删除mkdir -r abc &#x2F;&#x2F;递归删除目录mkdir -rf * &#x2F;&#x2F;可使用通配符 tree命令 — 123&lt;!--以树状图显示目录结构--&gt;tree &#x2F;&#x2F;以树状图显示当前目录结构tree -p &#x2F;&#x2F;以树状图显示当前目录结构,只显示目录 cp命令 — 1234&lt;!--复制文件--&gt;cp a b &#x2F;&#x2F;将a文件复制为b文件cp -i a . &#x2F;&#x2F;同名时提示是否覆盖cp -r a b &#x2F;&#x2F;可复制目录 查看文件内容 — 1234567cat a -b &#x2F;&#x2F;全部显示,显示行号，换行不显示cat a -n &#x2F;&#x2F;全部显示，显示行号，换行也显示more a &#x2F;&#x2F;分屏显示 空格 enter b f qgrep -nvi he a.txt &#x2F;&#x2F;在a.txt中查找he的位置 -n显示行号 -v取反 -i忽略大小写grep ^a a.txt &#x2F;&#x2F;在a.txt中查找以a开头的行grep a$ a.txt &#x2F;&#x2F;在a.txt中查找以a结尾的行ifconfig | grep inet &#x2F;&#x2F;查看本机IP地址 echo 和重定向 — 123echo hello &gt; a &#x2F;&#x2F;为a中添加内容，会覆盖echo hello &gt;&gt; a &#x2F;&#x2F;为a中追加内容tree &gt;&gt; a ssh 和 scp — 123ssh -p 22 ubuntu@192.168.0.8 &#x2F;&#x2F;将本地与linux连接scp -P 22 -r ubuntu@192.168.0.8:Desktop&#x2F;a . &#x2F;&#x2F;将linux文件复制到本地 -r表示可复制目录scp -P 22 -r a ubuntu@192.168.0.8:Desktop&#x2F;a &#x2F;&#x2F;本地文件复制到linux chmod命令 — 1chmod +&#x2F;-rwx 文件名&#x2F;目录名 &#x2F;&#x2F;修改文件或目录权限 +增&#x2F;-减 rwx 读写执行 which命令 — 1which ls &#x2F;&#x2F;查询命令所在位置 进程命令 — 12ps sux &#x2F;&#x2F;查看进程 a终端所有 u详细 x非终端kill [-9] 进程代号 &#x2F;&#x2F;关闭指定进程 -9强行关闭 其他命令 — 12345678910111213141516&lt;!--查询文件--&gt;find [目录] -name &quot;*.py&quot; &#x2F;&#x2F;在指定目录下搜索以.py结尾的文件ln -s 源文件位置 链接文件 &#x2F;&#x2F;使用绝对路径避免文件移动 创建软链接&lt;!--压缩&#x2F;解压文件--&gt;tar -cvf 打包文件.tar 被打包文件的路径 &#x2F;&#x2F;打包文件tar -xvf 打包文件.tar &#x2F;&#x2F;解包文件tar -zcvf 压缩文件.tar.gz 被压缩文件的路径 &#x2F;&#x2F;压缩文件tar -zxvf 压缩文件.tar.gz -C 压缩到指定目录 &#x2F;&#x2F;解压文件 目录必须存在tar -jcvf 压缩文件.tar.bz2 被压缩文件的路径 &#x2F;&#x2F;压缩文件tar -jxvf 压缩文件.tar.bz2 -C 压缩到指定目录 &#x2F;&#x2F;解压文件 目录必须存在&lt;!--安装卸载更新软件--&gt;sudo apt install 软件包 &#x2F;&#x2F;安装软件sudo apt remove 软件名 &#x2F;&#x2F;卸载软件sudo apt upgrade &#x2F;&#x2F;更新软件","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-06-12T05:51:30.041Z","updated":"2020-06-12T05:51:30.041Z","comments":true,"path":"2020/06/12/hello-world/","link":"","permalink":"http://yoursite.com/2020/06/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}